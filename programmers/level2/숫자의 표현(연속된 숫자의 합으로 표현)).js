function solution(n) {
    var answer = 0
    let subSum = 0
    let length = 1
    while (n - subSum > 0) {
        if ((n - subSum) % length === 0) {
            answer++
        }
        subSum += length
        length++
    }
    return answer
}


/*
  수학적으로 풀어야하는 문제였다. 은근 이런 게 어려운 것 같다.
  dp인가 싶기도 했지만 깊게 생각해보면 아니었고 결국 어떤 원리로 연속된 수의 합이 생기는 지를 수학적으로 알아야 했다.
  
  내 풀이는 15를 기준으로 예시를 들면
  (15 - (0)) % 1 === 0 이므로 answer++         -> 15
  (15 - (1)) % 2 === 0 이므로 answer++         -> 7 + 8
  (15 - (1+2)) % 3 === 0 이므로 answer++       -> 4 + 5 + 6
  (15 - (1+2+3)) % 4 !== 0 이므로 패스
  (15 - (1+2+3+4)) % 5 === 0 이므로 answer++   -> 3 + 4 + 5 + 6 + 7
  (15 - (1+2+3+4+5)) > 0 를 만족하지 않으므로 종료.
  
  ---
  
  다른 사람의 풀이 중에 수학적으로 기가막힌 게 있어서 가져왔다.
  
  홀수의 경우, 약수는 홀수 밖에 안나옴. 
  15의 약수는 1,3,5, 15. 약수를 이용해서 연속된 수의 합이 15가 나오도록 할 수도 있음.
  15=1+2+3+4+5 (중간값 3) 3x5
  15=4+5+6 (중간값 5) 5x3
  15=7+8 (연속된 수) 7+8 - 홀수인 경우 무조건 가능.
  15=15
  중간값이 3인 경우, 중간값이 5인 경우, 연속된 수(7, 8), 15(n) 해서 4개인데, 이게 공교롭게 홀수의 약수 수와 같음.
  
  그리고 짝수의 경우는 홀수의 연장선이라고 보면 됨. 
  n=30인 경우, 30의 약수는 1, 2, 3, 5, 6, 10, 15, 30임.
  30=4 + 5 + 6 + 7 + 8 (중간값 3의 연장) 2x(3x5)
  30=9 + 10 + 11 (중간값 5의 연장) 2x(5x3)
  30=6+7+8+9 (연속된 두 수의 연장) 2x(7+8)
  30=30
  결과적으로 n의 홀수 약수 개수만 구해도 답이랑 같음.
 */
